#!groovy

def evLibrary = library(identifier: 'evernym-aws-codebuild@aws-codebuild', retriever: modernSCM(
    github(credentialsId: 'evernym-github-machine-user', repoOwner: 'evernym', repository: 'jenkins-shared')
)).com.evernym.pipeline

logger = evLibrary.Logger.new(this)
logger.setGlobalLevel('TRACE')

notifier = evLibrary.Notifier.new(this)
utils = evLibrary.Utils.new(this)

// TODO set proper labels
def nodeLabels = [
    codeBuild: env.LIBSOVTOKEN_CODEBUILD_NODE_LABEL ?: '!macos',
    macos: env.LIBSOVTOKEN_MACOS_NODE_LABEL ?: 'macos', 
]

def codeBuildPipelines = {
    def packageName = 'libsovtoken'
    def srcVersion
    def lastRevision
    def debPVersion
    def cratePVersion
    def goals = ['package']

    def buildImageTag
    def osname = 'xenial'
    def prTag = "cd-$osname"

    stage('Checkout sources from SCM') {
        checkout scm
    }

    def evernymRepo = evLibrary.EvernymRepo.new(this)
    def utils = evLibrary.Utils.new(this)
    def buildCtx = evLibrary.AwsCodeBuildHelper.BuildCtx.new('libsovtoken')
    def awsCBHelper = evLibrary.AwsCodeBuildHelper.new(this, buildCtx)

    stage('Resolve current source version') {
        srcVersion = utils.srcVersion(projectType: 'rust')
        logger.info("Current source version: $srcVersion")
    }

    stage('Resolve last revision') {
        lastRevision = evernymRepo.getLastRevision {
            delegate.packageName = packageName
            packageSrcVersion = srcVersion
            repoDistr = 'agency-dev'
        }

        if (lastRevision) {
            logger.info("Found last revision number: $lastRevision")
        } else {
            logger.info("No previous revision was found")
        }
    }

    stage('Set release parameters') {
        def releaseVersion = "${lastRevision ? lastRevision[0] + 1: 1}.$BUILD_NUMBER"

        debPVersion = utils.packageVersion('deb', srcVersion, releaseVersion)
        logger.info("Package version for evernym repo: $debPVersion")

        // TODO crate and rpm
        //cratePVersion = utils.packageVersion('crate', srcVersion, releaseVersion)
        //logger.info("Package version for rust registry: $cratePVersion")
    }

    stage("$osname: Resolve image tag") {
        def _imgVersion = utils.shStdout("OSNAME=$osname make -C devops image_lstbase_version -s")
        buildImageTag = "${_imgVersion}-${osname}-cd"
        logger.info("CD docker image tag: $buildImageTag")
    }

    stage('Upload source to S3') {
        awsCBHelper.uploadSourceToS3()
    }

    awsCBHelper.build() {
        projectTag = prTag

        // build spec for env image
        envBuildSrc = ['devops', 'libsovtoken/Cargo.toml'] // TODO make more accurate
        envBuildCmds = [
            'export PROJECT_DIR=$PWD',
            'make -C devops image_lstbase'
        ]
        envBuildLocalName = "evernym/libsovtoken:$buildImageTag"
        envBuildEnvv = [
            [name: 'OSNAME', value: osname],
            [name: 'LSTBASE_DOCKER_TAG', value: buildImageTag],
        ]

        // env and build spec
        imageTag = buildImageTag
        buildspec = 'devops/aws-codebuild/buildspec.cd.yml'
        envv = [
            [name: 'OSNAME', value: osname],
            [name: 'MAKE_GOALS', value: "${goals.join(' ')}"],
            [name: 'ARTIFACTS', value: 'libsovtoken/target/release/libsovtoken*.*'],
            [name: 'FPM_P_VERSION', value: debPVersion],
           // [name: 'CRATE_P_VERSION', value: cratePVersion],
        ]

        onArtifacts = {
            this.stage("$osname: Archive logs") {
                utils.archiveArtifacts("logs/*.log*") {
                    truncate = true
                    allowEmptyArchive = true
                    truncateFileSuffix = 'trunc.log'
                }
            }
        }
    }

    stage('Upload deb to Evernym repo') {
        String debName

        dir("${awsCBHelper.buildCtx.projects[prTag].artifactsDir}") {
            debName = utils.shStdout("ls $packageName*$debPVersion*.deb")

            logger.info("Uploading debian package '$debName' to evernym repo")
            evernymRepo.upload {
                repoDistr = 'agency_dev'
                packagePath = debName
            }
        }

        notifier.email {
            subject = '$PROJECT_NAME - Build # $BUILD_NUMBER: ' + "new deb '$debName' was published"
            body = ("New debian package '$debName' was built and published" +
                '\n\nCheck console output at $BUILD_URL to view the results.')
        }
    }

    /*
    ['agency_dev', 'agency_qa'].each { distr ->
        stage("Promote deb from $distr") {
            evernymRepo.promote {
                repoDistr = distr
                delegate.packageName = packageName
                delegate.packageVersion = debPVersion
            }
        }
    }
    */
}

def macOSPipeline = {
    stage("MacOS Build") {
        def packageName = 'test-libsovtoken'
        def xcodeMinVersion = '9.0'
        def RUST_PATH = '~/.cargo/bin'


        stage('Checks') {
            echo "===================== Checks for XCode and Rust environment ========================"
            INSTALLED_XCODE_VERSION = sh(script: '''xcodebuild -version | head -1 | cut -d' ' -f2''', returnStdout: true)
            echo "INSTALLED_XCODE_VERSION = ${INSTALLED_XCODE_VERSION} and xcodeMinVersion = ${xcodeMinVersion}"
            if ( INSTALLED_XCODE_VERSION <= xcodeMinVersion ) {
                msg = "The XCode version must be greater or equal ${xcodeMinVersion}"
                echo "${msg}"
                error(msg)
            }

            RUST_HOME_EXIST = sh(script: "test -d ${RUST_PATH} && echo '1' || echo '0' ", returnStdout: true).trim()
            if ( RUST_HOME_EXIST == '0' ) {
                msg = "Rust home dir does not exist. Make sure that rust is installed in the ${RUST_PATH}."
                echo "${msg}"
                error(msg)
            }

            RUSTC_VERSION = sh(script: "${RUST_PATH}/rustc --version || echo '0' ", returnStdout: true).trim()
            if ( RUSTC_VERSION == '0' ) {
                msg = "rustc does not exist. Make sure that rust is installed in the ${RUST_PATH}."
                echo "${msg}"
                error(msg)
            }
        }
        
        stage('Checkout sources from SCM') {
            checkout scm
        }

        def evernymRepo = evLibrary.EvernymRepo.new(this)
        def utils = evLibrary.Utils.new(this)

        
        withEnv([
                    "PATH+RUST=${RUST_PATH}",
                    "PATH+BREW=/usr/local/bin",
                    "PATH+CURL=/usr/local/opt/curl/bin"
                ]) { 
            
            dir('libsovtoken/build_scripts/ios/mac/') {
                
                stage('mac.01.libindy.setup') {
                    sh './mac.01.libindy.setup.sh'
                }
                
                stage('mac.02.libindy.env.sh') {
                    sh ". mac.02.libindy.env.sh"
                }
                
                stage('mac.03.libindy.build.sh') {
                    try {
                            sh "./mac.03.libindy.build.sh"
                        } catch ( exc ) {
                            logger.info("Stage 'mac.03' failed with exception ${exc}. So we run additional steps.")
                            
                            stage('mac.08.libssl.libcrypto.build.sh') {
                                sh "./mac.08.libssl.libcrypto.build.sh"
                            }

                            stage('mac.09.libzmq.libsodium.build.sh') {
                                sh "./mac.09.libzmq.libsodium.build.sh"
                            }

                            stage('mac.10.libminiz.libsqlite3.combine.sh') {
                                sh "./mac.10.libminiz.libsqlite3.combine.sh"
                            }
                        }
                }

                stage('mac.14.libsovtoken.build.sh') {
                    sh "./mac.14.libsovtoken.build.sh"
                }
            }
            
            dir('libsovtoken') {
                stage('Upload libsovtoken universal package to Evernym repo') {
                    String pkgName
                    def repoUrl
                    renameCommand = utils.shStdout("ls libsovtoken*.zip | sed 's/libsovtoken\\(.*\\)/mv & ${packageName}\\1/' | tail -1")
                    sh "$renameCommand"
                    pkgName = utils.shStdout("ls ${packageName}*.zip")
                    logger.info("Uploading libsovtoken package '$pkgName' to evernym repo")

                    
                    evernymRepo.upload {
                        repoDistr = 'ios'
                        packagePath = pkgName
                    }
                }
            }
        }
    }
}

pipelineWrapper({
    Map builds = [
        codeBuild: [
            build: codeBuildPipelines,
            nodeLabel: "$nodeLabels.codeBuild"
        ],
        macos: [
            build: macOSPipeline,
            nodeLabel: "$nodeLabels.macos"
        ]
    ]
    builds.failFast = false

    stage("Build") {
        utils.parallel builds
    }
}, { err ->
    stage("Pipeline finalizing") {
        if (err) {
            logger.error("Pipeline failed with the error $err")
        }

        stage("Build result notification") {
            notifier.email()
        }
    }
})
