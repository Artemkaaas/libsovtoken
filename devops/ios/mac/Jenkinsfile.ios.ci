#!groovy

    def evLibrary = library(identifier: 'evernym-aws-codebuild@aws-codebuild', retriever: modernSCM(
        github(credentialsId: 'evernym-github-machine-user', repoOwner: 'evernym', repository: 'jenkins-shared')
    )).com.evernym.pipeline

logger = evLibrary.Logger.new(this)
notifier = evLibrary.Notifier.new(this)
logger.setGlobalLevel('TRACE')
def msg = "The new version of libsovtoken was uploaded. Check artifacts: $BUILD_URL"
def color = "good"

pipelineWrapper({
	nodeWrapper('osx') {
    	def packageName = 'libsovtoken'
        def xcodeMinVersion = '9.0'
        def RUST_PATH = '~/.cargo/bin'


        stage('Checks') {
            echo "===================== Checks for XCode and Rust environment ========================"
            INSTALLED_XCODE_VERSION = sh(script: '''xcodebuild -version | head -1 | cut -d' ' -f2''', returnStdout: true)
            echo "INSTALLED_XCODE_VERSION = ${INSTALLED_XCODE_VERSION} and xcodeMinVersion = ${xcodeMinVersion}"
            if ( INSTALLED_XCODE_VERSION <= xcodeMinVersion ) {
                msg = "The XCode version must be greater or equal ${xcodeMinVersion}"
                echo "${msg}"
                error(msg)
            }

            RUST_HOME_EXIST = sh(script: "test -d ${RUST_PATH} && echo '1' || echo '0' ", returnStdout: true).trim()
			if ( RUST_HOME_EXIST == '0' ) {
    			msg = "Rust home dir does not exist. Make sure that rust is installed in the ${RUST_PATH}."
                echo "${msg}"
                error(msg)
			}

			RUSTC_VERSION = sh(script: "${RUST_PATH}/rustc --version || echo '0' ", returnStdout: true).trim()
			if ( RUSTC_VERSION == '0' ) {
    			msg = "rustc does not exist. Make sure that rust is installed in the ${RUST_PATH}."
                echo "${msg}"
                error(msg)
			}
        }
        
        stage('Checkout sources from SCM') {
            checkout scm
        }

        def evernymRepo = evLibrary.EvernymRepo.new(this)
        def utils = evLibrary.Utils.new(this)

        
        withEnv([
                    "PATH+RUST=${RUST_PATH}",
                    "PATH+BREW=/usr/local/bin",
                ]) { 
            
            stage('Prepare') {
                echo "=============================== Fix Cargo.toml ================================="
                //sh '''sed -i '' -E -e 's/(rust\\-indy\\-sdk \\= .*) \\}/\\1, rev\\=\\"e1f26fb5e2b320b3accb1832442b04b89edc7dfe\\" \\}/g' libsovtoken/Cargo.toml'''
                
                // dir('libsovtoken/build_scripts/ios/mac/') {
                //     sh 'cargo update'
                // }
            }
            
            dir('libsovtoken/build_scripts/ios/mac/') {
                
                stage('mac.01.libindy.setup') {
                    sh './mac.01.libindy.setup.sh'
                }
                
                stage('mac.02.libindy.env.sh') {
                    sh ". mac.02.libindy.env.sh"
                }
                
                stage('mac.03.libindy.build.sh') {
                	try {
                		   	sh "./mac.03.libindy.build.sh"
                		} catch ( exc ) {
                			echo "Stage 'mac.03' failed with exception ${exc}. So we run additional steps."
                			
                			stage('mac.08.libssl.libcrypto.build.sh') {
                				sh "./mac.08.libssl.libcrypto.build.sh"
                			}

                			stage('mac.09.libzmq.libsodium.build.sh') {
                				sh "./mac.09.libzmq.libsodium.build.sh"
                			}

                			stage('mac.10.libminiz.libsqlite3.combine.sh') {
                				sh "./mac.10.libminiz.libsqlite3.combine.sh"
                			}
                		}
                }

                stage('mac.14.libsovtoken.build.sh') {
                    sh "./mac.14.libsovtoken.build.sh"
                }
            }
            
            dir('libsovtoken') {
                stage('Upload libsovtoken universal package to Evernym repo') {
                    String pkgName
                    def repoUrl
                    pkgName = utils.shStdout("ls ${packageName}*.zip")
                    repoUrl = 'https://kraken.corp.evernym.com/repo/ios/upload'
                    logger.info("Uploading libsovtoken package '$pkgName' to evernym repo")

                    // FIXME: 
                    // Commented because curl is crashing with error:
                    //
                    //	+ curl -u '****' -F file=@libsovtoken_0.8.0-201808071618-174b1fe_all.zip --fail --cacert kraken.ca.crt https://kraken.corp.evernym.com/repo/ios/upload
					//   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
					//                                  Dload  Upload   Total   Spent    Left  Speed

					//   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
					//   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
					// curl: (60) SSL: failed to create SecCertificate from CA certificate
					// More details here: https://curl.haxx.se/docs/sslcerts.html

                    // evernymRepo.upload {
                    // 	repoAPIBaseUrl = 'https://kraken.corp.evernym.com/repo/'
                    //  	repoBaseUrl = 'https://kraken.corp.evernym.com/repo/'
                    //  	repoDistr = 'ios'
                    //     packagePath = pkgName
                    // }

     				withCredentials([usernamePassword(credentialsId: 'jenkins-kraken-upload', usernameVariable: 'USRN', passwordVariable: 'PSWD')]) {
                    	sh """
                    		set +x
                    		curl --insecure -u '${USRN}:${PSWD}' -X POST -F file=@${pkgName} --url ${repoUrl}
                    	"""
                    }
                }
            }
        }
   	} 
}, { err ->
        if (err) {
            logger.error("Pipeline failed with the error ${err}")
        }

        stage("Build result notification") {
           	notifier.email {
                to = '$DEFAULT_RECIPIENTS ' + (this.env.LIBSOVTOKEN_DEF_RECIPIENTS ?: '')
            }
        }
   	}
)
